<?php
/**
 * Test Script for Motor Charging Report Functions
 * Run this to verify that the report functions work correctly
 */

// Start session for testing
session_start();
$_SESSION['user_id'] = 1; // Simulate logged-in user
$_SESSION['username'] = 'test_user';

// Include required files
require_once 'includes/db_connect.php';
require_once 'includes/report_functions.php';

echo "<h1>üß™ Motor Charging Report Functions Test</h1>\n";
echo "<style>body { font-family: Arial, sans-serif; margin: 2rem; } .success { color: green; } .error { color: red; } .info { color: blue; }</style>\n";

// Test 1: Check if functions exist
echo "<h2>Test 1: Function Existence Check</h2>\n";
if (function_exists('canGenerateMotorChargingReport')) {
    echo "<p class='success'>‚úÖ canGenerateMotorChargingReport() exists</p>\n";
} else {
    echo "<p class='error'>‚ùå canGenerateMotorChargingReport() not found</p>\n";
}

if (function_exists('getMotorChargingReportData')) {
    echo "<p class='success'>‚úÖ getMotorChargingReportData() exists</p>\n";
} else {
    echo "<p class='error'>‚ùå getMotorChargingReportData() not found</p>\n";
}

// Test 2: Get a real rocket ID from database
echo "<h2>Test 2: Database Connection and Rocket Data</h2>\n";
try {
    $rocket_query = $pdo->prepare("SELECT rocket_id, serial_number, project_name FROM rockets LIMIT 1");
    $rocket_query->execute();
    $test_rocket = $rocket_query->fetch(PDO::FETCH_ASSOC);
    
    if ($test_rocket) {
        echo "<p class='success'>‚úÖ Database connected</p>\n";
        echo "<p class='info'>Testing with Rocket: {$test_rocket['serial_number']} - {$test_rocket['project_name']} (ID: {$test_rocket['rocket_id']})</p>\n";
        $test_rocket_id = $test_rocket['rocket_id'];
    } else {
        echo "<p class='error'>‚ùå No rockets found in database</p>\n";
        exit;
    }
} catch (Exception $e) {
    echo "<p class='error'>‚ùå Database error: " . $e->getMessage() . "</p>\n";
    exit;
}

// Test 3: Test canGenerateMotorChargingReport function
echo "<h2>Test 3: Permission Check Function</h2>\n";
try {
    $can_generate = canGenerateMotorChargingReport($pdo, $test_rocket_id);
    
    if ($can_generate === true) {
        echo "<p class='success'>‚úÖ Report generation ALLOWED for rocket {$test_rocket_id}</p>\n";
        echo "<p class='info'>All mandatory steps exist and are approved</p>\n";
    } elseif ($can_generate === false) {
        echo "<p class='error'>‚ùå Report generation DENIED for rocket {$test_rocket_id}</p>\n";
        echo "<p class='info'>Missing steps or approvals (this is expected for test data)</p>\n";
    } else {
        echo "<p class='error'>‚ùå Unexpected return value from canGenerateMotorChargingReport</p>\n";
    }
} catch (Exception $e) {
    echo "<p class='error'>‚ùå Permission check error: " . $e->getMessage() . "</p>\n";
}

// Test 4: Test mandatory steps helper
echo "<h2>Test 4: Mandatory Steps Configuration</h2>\n";
try {
    $mandatory_steps = getMandatoryMotorChargingSteps();
    echo "<p class='success'>‚úÖ Mandatory steps retrieved</p>\n";
    echo "<p class='info'>Required steps (" . count($mandatory_steps) . " total):</p>\n";
    echo "<ul>\n";
    foreach ($mandatory_steps as $step) {
        echo "<li>{$step}</li>\n";
    }
    echo "</ul>\n";
} catch (Exception $e) {
    echo "<p class='error'>‚ùå Mandatory steps error: " . $e->getMessage() . "</p>\n";
}

// Test 5: Test data aggregation function (regardless of permissions)
echo "<h2>Test 5: Data Aggregation Function</h2>\n";
try {
    $report_data = getMotorChargingReportData($pdo, $test_rocket_id);
    
    if ($report_data === false) {
        echo "<p class='error'>‚ùå Data aggregation failed (likely due to missing approvals)</p>\n";
        echo "<p class='info'>This is expected if the rocket doesn't have all required approved steps</p>\n";
    } elseif (is_array($report_data)) {
        echo "<p class='success'>‚úÖ Data aggregation successful</p>\n";
        
        // Validate data structure
        if (validateReportDataStructure($report_data)) {
            echo "<p class='success'>‚úÖ Report data structure is valid</p>\n";
        } else {
            echo "<p class='error'>‚ùå Report data structure is invalid</p>\n";
        }
        
        // Show summary
        echo "<p class='info'>Report Data Summary:</p>\n";
        echo "<ul>\n";
        echo "<li>Rocket: {$report_data['rocket_info']['serial_number']}</li>\n";
        echo "<li>Total Steps: {$report_data['report_metadata']['total_steps']}</li>\n";
        echo "<li>Approved Steps: {$report_data['report_metadata']['approved_steps']}</li>\n";
        echo "<li>Generated By: {$report_data['generated_by']}</li>\n";
        echo "<li>Generated At: {$report_data['generated_at']}</li>\n";
        echo "</ul>\n";
    } else {
        echo "<p class='error'>‚ùå Unexpected return type from getMotorChargingReportData</p>\n";
    }
} catch (Exception $e) {
    echo "<p class='error'>‚ùå Data aggregation error: " . $e->getMessage() . "</p>\n";
}

// Test 6: Show current production steps for the test rocket
echo "<h2>Test 6: Current Production Steps Analysis</h2>\n";
try {
    $steps_query = $pdo->prepare("
        SELECT 
            ps.step_name,
            ps.step_timestamp,
            u.full_name as staff_name,
            CASE 
                WHEN a.status = 'approved' THEN 'APPROVED'
                WHEN a.status = 'rejected' THEN 'REJECTED' 
                WHEN a.status = 'pending' THEN 'PENDING'
                ELSE 'NO APPROVAL'
            END as approval_status
        FROM production_steps ps
        LEFT JOIN users u ON ps.staff_id = u.user_id
        LEFT JOIN approvals a ON ps.step_id = a.step_id
        WHERE ps.rocket_id = ?
        ORDER BY ps.step_timestamp ASC
    ");
    $steps_query->execute([$test_rocket_id]);
    $current_steps = $steps_query->fetchAll(PDO::FETCH_ASSOC);
    
    if (count($current_steps) > 0) {
        echo "<p class='success'>‚úÖ Found " . count($current_steps) . " production steps</p>\n";
        echo "<table border='1' cellpadding='5' style='border-collapse: collapse; width: 100%;'>\n";
        echo "<tr><th>Step Name</th><th>Timestamp</th><th>Staff</th><th>Approval Status</th></tr>\n";
        foreach ($current_steps as $step) {
            $status_class = ($step['approval_status'] === 'APPROVED') ? 'success' : 'error';
            echo "<tr>";
            echo "<td>{$step['step_name']}</td>";
            echo "<td>{$step['step_timestamp']}</td>";
            echo "<td>{$step['staff_name']}</td>";
            echo "<td class='{$status_class}'>{$step['approval_status']}</td>";
            echo "</tr>\n";
        }
        echo "</table>\n";
    } else {
        echo "<p class='error'>‚ùå No production steps found for this rocket</p>\n";
    }
} catch (Exception $e) {
    echo "<p class='error'>‚ùå Steps analysis error: " . $e->getMessage() . "</p>\n";
}

// Test 7: Check what's missing for report generation
echo "<h2>Test 7: Missing Requirements Analysis</h2>\n";
try {
    $mandatory_steps = getMandatoryMotorChargingSteps();
    $missing_steps = [];
    $unapproved_steps = [];
    
    foreach ($mandatory_steps as $required_step) {
        // Check if step exists
        $step_check = $pdo->prepare("
            SELECT ps.step_id, ps.step_name,
                   a.status as approval_status
            FROM production_steps ps
            LEFT JOIN approvals a ON ps.step_id = a.step_id
            WHERE ps.rocket_id = ? AND ps.step_name = ?
            ORDER BY ps.step_timestamp DESC
            LIMIT 1
        ");
        $step_check->execute([$test_rocket_id, $required_step]);
        $step_info = $step_check->fetch(PDO::FETCH_ASSOC);
        
        if (!$step_info) {
            $missing_steps[] = $required_step;
        } elseif ($step_info['approval_status'] !== 'approved') {
            $unapproved_steps[] = $required_step . " (Status: " . ($step_info['approval_status'] ?: 'No Approval') . ")";
        }
    }
    
    if (count($missing_steps) > 0) {
        echo "<p class='error'>‚ùå Missing Required Steps:</p>\n";
        echo "<ul>\n";
        foreach ($missing_steps as $step) {
            echo "<li>{$step}</li>\n";
        }
        echo "</ul>\n";
    }
    
    if (count($unapproved_steps) > 0) {
        echo "<p class='error'>‚ùå Unapproved Required Steps:</p>\n";
        echo "<ul>\n";
        foreach ($unapproved_steps as $step) {
            echo "<li>{$step}</li>\n";
        }
        echo "</ul>\n";
    }
    
    if (count($missing_steps) === 0 && count($unapproved_steps) === 0) {
        echo "<p class='success'>‚úÖ All requirements met! Report can be generated.</p>\n";
    } else {
        echo "<p class='info'>üí° To enable report generation, complete the missing/unapproved steps above.</p>\n";
    }
    
} catch (Exception $e) {
    echo "<p class='error'>‚ùå Missing requirements analysis error: " . $e->getMessage() . "</p>\n";
}

echo "<hr>\n";
echo "<p><strong>üéØ Test Summary:</strong> Backend functions are ready for Phase 2 implementation!</p>\n";
?>
